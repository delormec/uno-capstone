@*
    Screen:         Form/Edit
    Description:    Partial View that lists all the questions in a form. 
                    Each type of question has it's own partial view.
    Input:          (EntityCollection<Question>) Model.
                        List of questions in a form.
                    (int) ViewBag.tabopen
                        Specify what question you want to open.
    Output:         AJAX: Form/Edit
                    AJAX: Form/DeleteQuestion 
*@
@model System.Data.Objects.DataClasses.EntityCollection<HOST_Admin.Models.Question>
@{
    //used to set the form names up so that they are treated as a List<Questions>
    int questionid = 0;
    int tabcount = 1;
    int tabopen = ViewBag.tabopen;

    //pulls viewbag from renderer (from Edit.cshtml)
    //var vb = ((dynamic)ViewData["vb"]);

    List<SelectListItem> fieldtypes = new List<SelectListItem>(){
                                        new SelectListItem() {Text = "Choice / Single-line text", Value="SINGLE"},
                                        new SelectListItem() {Text = "Multi-line text", Value="MULTI"},
                                        new SelectListItem() {Text = "Date", Value="DATE"},
                                        new SelectListItem() {Text = "Currency / Number", Value="NUMBER"}
                                    };

    //set up the drop down that will handle changing question order
    //this really should be in the controller, but it causes issues with layered 
    List<int> order = new List<int>();                                    
                                    
    for (int i = 0; i < Model.Count(); i++)
    {
        order.Add(i+1);
    }

    ViewBag.order = order;
    ViewBag.FieldTypes = fieldtypes;                                       
}

<input type="hidden" id="TabOpen" value="@tabopen" />

@* We actually hide this area until the entire form loads then javascript shows it *@
<div id="QuestionTabInner" style="display:none;">
<ul>
@* Loop through each question. *@
@foreach (HOST_Admin.Models.Question item in Model.OrderBy(ql => ql.SortOrder))
{
   <li><a href="#tabs-@tabcount">@tabcount</a></li>
    tabcount++;
}
</ul>

@* Loop through each question. *@
@foreach (HOST_Admin.Models.Question item in Model.OrderBy(ql => ql.SortOrder))
{

    ViewBag.questionid = questionid;
    questionid++;
    
    //set selected value
    //order[item.SortOrder].Selected = true;
    //order.Where(sli => sli.Text == item.SortOrder.ToString()).Single().Selected = true;
    
    <div id="tabs-@questionid">

    @* Based on what type of question it is create the form, and pass in the viewbag so it can know what # it needs to be. *@
    @if (item is HOST_Admin.Models.TextQuestion)
    {
        Html.RenderPartial("_TextQuestionRow", item, new ViewDataDictionary { { "vb", ViewBag } });
    }
    else if (item is HOST_Admin.Models.ChoiceQuestion)
    {
        Html.RenderPartial("_ChoiceQuestionRow", item, new ViewDataDictionary { { "vb", ViewBag } });
    }
    else if (item is HOST_Admin.Models.LikertScaleQuestion)
    {
        Html.RenderPartial("_LikertScaleQuestionRow", item, new ViewDataDictionary { { "vb", ViewBag } });
    }
        
    @* Dual AJAX call, first it saves the entire form, then it deletes the question and redraws the question area. *@
    @Ajax.ActionLink("Delete Question", "DeleteQuestion", new { question_id = item.QuestionId }, new AjaxOptions { UpdateTargetId = "QuestionTabOuter", InsertionMode = InsertionMode.Replace, OnBegin = "$('#form-edit').ajaxSubmit({type: 'post', async: false }); $('#QuestionTabInner').hide();" })        

    
    @* Drop down that will let us reorder the questions. *@
    <div id="form-editor-question-order">
        Change Position: @Html.DropDownList("ChangePosition" + questionid.ToString(), new SelectList(order, questionid), new { @class = "ChangePosition", data_url = Url.Action("ChangeQuestionPosition", new { question_id = item.QuestionId, start_position = item.SortOrder }) })
    </div>

    @* Alternative method I'm not going to use for now *@
    @* @Ajax.ActionLink("Delete Question", "DeleteQuestion", new { questionId = item.QuestionId }, new AjaxOptions { OnBegin = "RemoveTab(" + @item.SortOrder + ");" }) *@
    
    </div>
}

<div id="not"></div>
 </div>