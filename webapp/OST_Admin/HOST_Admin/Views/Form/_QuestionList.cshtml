@model System.Data.Objects.DataClasses.EntityCollection<HOST_Admin.Models.Question>

@{
    //used to set the form names up so that they are treated as a List<Questions>
    int questionid = 0;
    int tabcount = 1;
    int tabopen = ViewBag.tabopen;

    //pulls viewbag from renderer (from Edit.cshtml)
    //var vb = ((dynamic)ViewData["vb"]);

    List<SelectListItem> fieldtypes = new List<SelectListItem>(){
                                        new SelectListItem() {Text = "Choice / Single-line text", Value="SINGLE"},
                                        new SelectListItem() {Text = "Multi-line text", Value="MULTI"},
                                        new SelectListItem() {Text = "Date", Value="DATE"},
                                        new SelectListItem() {Text = "Currency / Number", Value="NUMBER"}
                                    };

    ViewBag.FieldTypes = fieldtypes;                                    
    
}

<input type="hidden" id="TabOpen" value="@tabopen" />

<div id="QuestionTabInner" style="display:none;">
<ul>
@foreach (HOST_Admin.Models.Question item in Model.OrderBy(ql => ql.SortOrder))
{
   <li><a href="#tabs-@tabcount">@tabcount</a></li>
    tabcount++;
}
</ul>

@foreach (HOST_Admin.Models.Question item in Model.OrderBy(ql => ql.SortOrder))
{

    ViewBag.questionid = questionid;
    questionid++;
    
    
    <div id="tabs-@questionid">
    @{//Based on what type of question it is create the form, and pass in the viewbag so it can know what # it needs to be.
    }
    @if (item is HOST_Admin.Models.TextQuestion)
    {
        Html.RenderPartial("_TextQuestionRow", item, new ViewDataDictionary { { "vb", ViewBag } });
    }
    else if (item is HOST_Admin.Models.ChoiceQuestion)
    {
        Html.RenderPartial("_ChoiceQuestionRow", item, new ViewDataDictionary { { "vb", ViewBag } });
    }
    else if (item is HOST_Admin.Models.LikertScaleQuestion)
    {
        Html.RenderPartial("_LikertScaleQuestionRow", item, new ViewDataDictionary { { "vb", ViewBag } });
    }
    @{
        
    @Ajax.ActionLink("Delete Question", "DeleteQuestion", new { questionId = item.QuestionId }, new AjaxOptions { UpdateTargetId = "QuestionTabOuter", InsertionMode = InsertionMode.Replace, OnBegin = "$('#form-edit').ajaxSubmit({type: 'post', async: false }); $('#QuestionTabInner').hide();" })        

    //Alternative method I'm not going to use for now
    //@Ajax.ActionLink("Delete Question", "DeleteQuestion", new { questionId = item.QuestionId }, new AjaxOptions { OnBegin = "RemoveTab(" + @item.SortOrder + ");" })

    }
    </div>
}

<div id="not"></div>
 </div>