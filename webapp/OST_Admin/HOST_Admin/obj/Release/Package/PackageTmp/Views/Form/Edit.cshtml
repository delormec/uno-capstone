@model HOST_Admin.Models.Form

@{
    ViewBag.Title = "Edit Form";
    int fid = ViewBag.formId;
    List<SelectListItem> FieldTypes = ViewBag.FieldTypes;
}
@using (Html.BeginForm("Edit","Form", FormMethod.Post, new { @id = "form-edit" }))
{
    @Html.ValidationSummary(true)
    <div id ="form-editor-outer">
    @{  //commented out for now, don't think we need it now that main menu exists
    //<div>@Html.ActionLink("Back to List", "Index", null, new { id = "Back" })</div>
    }
    <div class="header ui-widget-header ui-corner-top">Edit Form</div>
    <div id="form-editor" class="ui-corner-bottom ui-widget-content ui-widget">
        @Html.HiddenFor(model => model.FormId)
        @Html.HiddenFor(model => model.DateCreated)
        @Html.HiddenFor(model => model.CreatedBy)

        <div id="form-title">
            <input id="Name" class="text-box single-line host-standard-textbox" type="text" value="@Model.Name" name="Name"/>
        </div>
        <div id="form-descrip">
            <input id="Description" class="text-box single-line host-standard-textbox" type="text" value="@Model.Description" name="Description"/>
        </div>

         <table id="form-editor-meta-table">
            <tr>
                <td> SharePoint URL @MyHTML.Help("The URL to the SharePoint list for this form") <div class="req">*</div> </td>
                <td colspan="3">
                    <div id="form-url">

                        <input id="URL" class="text-box single-line host-standard-textbox" type="text" value="@Model.URL" name="URL"/> 
                    </div>                        
                </td>
            </tr>
            <tr>
                <td> SharePoint ListName  @MyHTML.Help("The name of the list in SharePoint for this form") <div class="req">*</div> </td>
                <td colspan="3">
                    <div id="form-list-name">
                        <input id="ListName" class="text-box single-line host-standard-textbox" type="text" value="@Model.ListName" name="ListName"/>
                    </div>
                </td>
            </tr>
            <tr>
                <td> Form Group @MyHTML.Help("The group for this form. This is how forms will be categorized on the device application.") <div class="req">*</div>  </td>
                <td colspan="3">
                    <div id="form-group">
                        <input id="Group" class="text-box single-line host-standard-textbox" type="text" value="@Model.Group" name="Group"/>
                    </div>
                </td>
            </tr>
            <tr>
                <td>Auto Update @MyHTML.Help("True - completed forms will be pushed to the SharePoint list automatically from the device when the device is connected to the Internet.\nFalse - completed forms will be manually pushed to SharePoint from the device by the user.") </td>
                <td>
                    @{
                        <div id="form-edit-btnset-autoupdate">
                        @if (Model.AutoUpdate == true)
                        {
                            <input type="radio" id="form-edit-autoupdate1" name="AutoUpdate" value="true" checked="checked"/><label for="form-edit-autoupdate1">True</label>
                            <input type="radio" id="form-edit-autoupdate2" name="AutoUpdate" value="false" /><label for="form-edit-autoupdate2">False</label>
                        }
                        else
                        {
                            <input type="radio" id="form-edit-autoupdate1" name="AutoUpdate" value="true" /><label for="form-edit-autoupdate1">True</label>
                            <input type="radio" id="form-edit-autoupdate2" name="AutoUpdate" value="false" checked="checked"/><label for="form-edit-autoupdate2">False</label>
                        }
                        </div>
                    }
                </td>
                <td> </td>
                <td> </td>
            </tr>
            <tr>
                <td>Active @MyHTML.Help("True - completed forms will show up on the mobile app.\nFalse - completed forms will stay in the admin tool.") </td>
                <td>
                    @{
                        <div id="form-edit-btnset-active">
                        @if (Model.Active == true)
                        {
                            <input type="radio" id="form-edit-active1" name="Active" value="true" checked="checked"/><label for="form-edit-active1">True</label>
                            <input type="radio" id="form-edit-active2" name="Active" value="false" /><label for="form-edit-active2">False</label>
                        }
                        else
                        {
                            <input type="radio" id="form-edit-active1" name="Active" value="true" /><label for="form-edit-active1">True</label>
                            <input type="radio" id="form-edit-active2" name="Active" value="false" checked="checked"/><label for="form-edit-active2">False</label>
                        }
                        </div>
                    }
                </td>
                <td> </td>
                <td> </td>
            </tr>
            <tr>
                <td> Key Field  @MyHTML.Help("The key field of a form will be used by the device to display a list of completed forms. The key field should be a field that is unique for each completed form.") <div class="req">*</div> </td>
                <td>
                    <div id="form-key-field">
                        <input id="KeyField" class="text-box single-line host-standard-textbox" type="text" value="@Model.KeyField" name="KeyField"/>
                    </div>
                </td>
                <td> </td>
                <td> </td>
            </tr>
            <tr>
                <td>FilledBy Field Name @MyHTML.Help("This is an optional field. When it is filled in the mobile app will populate this with whomever filled out the form.\nIf this field is specified, it will cause an error if the SharePoint List does not contain this field.")</td>
                <td> <input id="FilledByFieldName" class="text-box single-line host-standard-textbox" type="text" value="@Model.FilledByFieldName" name="FilledByFieldName" /> </td>
                <td>FilledDate Field Name @MyHTML.Help("This is an optional field. When it is filled in the mobile app will populate this with the date a form is filled out.\nIf this field is specified, it will cause an error if the SharePoint List does not contain this field.")</td>
                <td> <input id="FilledDateFieldName" class="text-box single-line host-standard-textbox" type="text" value="@Model.FilledDateFieldName" name="FilledDateFieldName" /> </td>
            </tr>
            <tr>
                <td>FilledBy Field Type @MyHTML.Help("Data type that corresponds to the FilledBy field. It will likely be Single-line or Multi-line text.")</td>
                <td> @Html.DropDownListFor(m => m.FilledByFieldType, new SelectList(FieldTypes, "Value", "Text", Model.FilledByFieldType)) </td>
                <td>FilledDate Field Type @MyHTML.Help("Data type that corresponds to the FilledDate field. It will likely be of type Date.")</td>
                <td> @Html.DropDownListFor(m => m.FilledDateFieldType, new SelectList(FieldTypes, "Value", "Text", Model.FilledDateFieldType)) </td>
            </tr>
        </table>
    </div>

    <input type="submit" id="Save" value="Save Form" />

    @Ajax.ActionLink("Add a Text Question", "AddQuestion", new { formId = fid, type = "Text" }, new AjaxOptions { UpdateTargetId = "QuestionTabOuter", InsertionMode = InsertionMode.Replace, OnBegin = "$('#form-edit').ajaxSubmit({type: 'post', async: false }); $('#QuestionTabInner').hide(); return true;" })
    @Ajax.ActionLink("Add a Choice Question", "AddQuestion", new { formId = fid, type = "Choice" }, new AjaxOptions { UpdateTargetId = "QuestionTabOuter", InsertionMode = InsertionMode.Replace, OnBegin = "$('#form-edit').ajaxSubmit({type: 'post', async: false }); $('#QuestionTabInner').hide();" })
    @Ajax.ActionLink("Add a Likert Question", "AddQuestion", new { formId = fid, type = "Likert" }, new AjaxOptions { UpdateTargetId = "QuestionTabOuter", InsertionMode = InsertionMode.Replace, OnBegin = "$('#form-edit').ajaxSubmit({type: 'post', async: false }); $('#QuestionTabInner').hide();" })
    <br />  
    <div id="QuestionTabOuter">
        @Html.Partial("_QuestionList", Model.Questions)
    </div>
    <br />
    <div id="edit-validation-error" title="Validation Error" class="dialog">
        <p><span class="ui-icon ui-icon-alert" style="float: left; margin: 0 7px 20px 0;"></span>There are required fields that have been left empty, you may have to look through questions to find it.</p>
    </div>
</div>

}


@section Scripts {

<script>
    $(function () {
        $("#QuestionTabInner").livequery(function () {
            SetUpTabs();
            $('#QuestionTabInner').tabs({ active: $('#TabOpen').attr('value') });
            $("input[type=submit],  a[data-ajax=true][id!='option-delete-button'][id!='option-add-button'], button").button();
            $("#Back").button();
            $('#QuestionTabInner').show();
        });

        $("#form-edit-btnset-autoupdate").buttonset();

        $("#form-edit-btnset-active").buttonset();

        $("div[class*=OtherSet]").livequery(function (event) {
            $(this).buttonset();
        });

        $("div[class*=MultipleSet]").livequery(function (event) {
            $(this).buttonset();
        });

        $("#QuestionTabInner").show();

        $("#form-edit").validate({
            rules: {
                Name: { required: true },
                Group: { required: true },
                URL: { required: true },
                ListName: { required: true },
                KeyField: { required: true, number: true }
            },
            ignore: [],
            invalidHandler: function () {
                $("#edit-validation-error").dialog('open');
            }
        });

        $("#edit-validation-error").dialog({
            autoOpen: false,
            modal: true
        });
    });

    function RemoveTab(id)
    {
        var tab = $("#QuestionTabInner").find(".ui-tabs-nav li:eq(" + id + ")").remove();
        // Find the id of the associated panel
        var panelId = tab.attr("aria-controls");
        // Remove the panel
        $("#" + panelId).remove();
        // Refresh the tabs widget
        $("#QuestionTabInner").tabs("refresh");
    }

    function SetUpTabs()
    {
        var $tabs = $('#QuestionTabInner').tabs();

        $(".ui-tabs-panel").each(function (i) {

            var totalSize = $(".ui-tabs-panel").size() - 1;

            if (i != totalSize) {
                next = i + 1;
                $(this).append("<a href='#' class='next-tab mover' rel='" + next + "'>Next Question &#187;</a>");
            }

            if (i != 0) {
                prev = i - 1;
                $(this).append("<a href='#' class='prev-tab mover' rel='" + prev + "'>&#171; Prev Question</a>");
            }

        });

        $('.next-tab, .prev-tab').click(function () {
            $tabs.tabs({ active: $(this).attr("rel") });
            return false;
        });

             
    }

</script>
}
