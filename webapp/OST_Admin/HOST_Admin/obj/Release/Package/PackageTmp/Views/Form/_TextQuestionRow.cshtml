@model HOST_Admin.Models.TextQuestion
@{
    ViewBag.Title = "TextQuestionRow";

    //pulls viewbag from renderer
    var vb = ((dynamic)ViewData["vb"]);

    //which allows me to pass in what prefix my html elements should have (and question #)
    int id = vb.questionid;

    //appends a prefix to all my element names in this case [id]. this allows it to fit into a List<Question>
    ViewData.TemplateInfo.HtmlFieldPrefix = "[" + id + "]";
}

        @Html.HiddenFor(model => model.QuestionId)
        <input type="hidden" value="@Model.SortOrder" name="[@id].SortOrder" id="QSortOrder" />
        @Html.Hidden("ModelType", Model.GetType())

        <div id="question-type">Text Question</div>
        <div id="question-text">
            <input class="text-box single-line required" type="text" value="@Model.Text" name="[@Model.SortOrder].Text"/>
        </div>
        <div id="question-help-text">
            <input class="text-box single-line" type="text" value="@Model.HelpText" name="[@Model.SortOrder].HelpText"/>
        </div>

        <table id="question-table">
            <tr>
                <td>Field Name</td>
                <td>
                    <div id="question-field-name">
                        <input class="text-box single-line required" type="text" value="@Model.FieldName" name="[@Model.SortOrder].FieldName"/>
                    </div>
                </td>
                <td>@MyHTML.Help("The name of the field for this question in the SharePoint list")</td>
            </tr>
            <tr>
                <td>Field Type</td>
                <td>
                    <div id="question-field-type">
                        <input class="text-box single-line required" type="text" value="@Model.FieldType" name="[@Model.SortOrder].FieldType"/>
                    </div>
                </td>
                <td>@MyHTML.Help("The type of the field for this question in the SharePoint list")</td>
            </tr>
        </table>

        @{
        /*

        <div class="editor-label">
            @Html.LabelFor(model => model.Text)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Text)
            @Html.ValidationMessageFor(model => model.Text)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.HelpText)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.HelpText)
            @Html.ValidationMessageFor(model => model.HelpText)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.FieldName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FieldName)
            @Html.ValidationMessageFor(model => model.FieldName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.FieldType)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FieldType)
            @Html.ValidationMessageFor(model => model.FieldType)
        </div>
        */
        }